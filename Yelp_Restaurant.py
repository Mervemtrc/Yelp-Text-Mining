# -*- coding: utf-8 -*-
"""Untitled70.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1o_Ru_mARn2vpmXK0JA_bn7P-4SWabzZu
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.ensemble import RandomForestClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, classification_report
import joblib
import nltk
from nltk.tokenize import word_tokenize
from nltk.corpus import stopwords

# Step 1: Data Understanding and Preprocessing
# Load the dataset
data = pd.read_csv("/content/drive/MyDrive/datamining/Yelp Restaurant Reviews.csv")

# Convert ratings to binary labels: 1 for recommended, 0 for not recommended
data['Recommended'] = data['Rating'].apply(lambda x: 1 if x >= 4 else 0)

# Preprocess text data: assuming the dataset has a 'Review' column
nltk.download('punkt')
nltk.download('stopwords')

def preprocess_text(text):
    # Tokenization
    tokens = word_tokenize(text)
    # Convert to lowercase
    tokens = [word.lower() for word in tokens]
    # Remove punctuation
    tokens = [word for word in tokens if word.isalpha()]
    # Remove stop words
    stop_words = set(stopwords.words('english'))
    tokens = [word for word in tokens if not word in stop_words]
    # Join tokens back into string
    return " ".join(tokens)

# Ensure the column name is correct
data['Cleaned_Review'] = data['Review Text'].apply(preprocess_text)

# Step 2: Feature Engineering
# Vectorize text data using TF-IDF
tfidf_vectorizer = TfidfVectorizer(max_features=1000, stop_words='english')
X = tfidf_vectorizer.fit_transform(data['Cleaned_Review'])
y = data['Recommended']

# Step 3: Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Step 4: Model Building
# Random Forest
random_forest_model = RandomForestClassifier(n_estimators=100, random_state=42)
random_forest_model.fit(X_train, y_train)

# Logistic Regression
logistic_regression_model = LogisticRegression(max_iter=1000, random_state=42)
logistic_regression_model.fit(X_train, y_train)

# Step 5: Model Evaluation
# Evaluate Random Forest Model
random_forest_predictions = random_forest_model.predict(X_test)
print("\nRandom Forest Model Results:")
print("Accuracy:", accuracy_score(y_test, random_forest_predictions))
print("Classification Report:")
print(classification_report(y_test, random_forest_predictions))

# Evaluate Logistic Regression Model
logistic_regression_predictions = logistic_regression_model.predict(X_test)
print("\nLogistic Regression Model Results:")
print("Accuracy:", accuracy_score(y_test, logistic_regression_predictions))
print("Classification Report:")
print(classification_report(y_test, logistic_regression_predictions))

# Step 6: Model Deployment
# Deploy the random forest model for labeling customer reviews in production
# Save the model using joblib
joblib.dump(random_forest_model, 'random_forest_model.pkl')

# Save the model using joblib
joblib.dump(logistic_regression_model, 'logistic_regression_model.pkl')

# Assume new_reviews is a list containing new customer reviews
new_reviews = ["This dessert was amazing!", "The service was terrible."]

# Preprocess the new reviews (assuming preprocess_text function is defined)
preprocessed_reviews = [preprocess_text(review) for review in new_reviews]

# Vectorize the preprocessed reviews using TF-IDF vectorizer
X_new = tfidf_vectorizer.transform(preprocessed_reviews)

# Predict labels for the new reviews using the loaded Random Forest model
predicted_labels = random_forest_model.predict(X_new)

# Display the predicted labels
for review, label in zip(new_reviews, predicted_labels):
    recommendation = "Recommended" if label == 1 else "Not Recommended"
    print(f"Review: {review} - Prediction: {recommendation}")

# Predict labels for the new reviews using the logistic regression model
predicted_labels_lr = logistic_regression_model.predict(X_new)

# Display the predicted labels
print("\nPredictions using Logistic Regression Model:")
for review, label in zip(new_reviews, predicted_labels_lr):
    recommendation = "Recommended" if label == 1 else "Not Recommended"
    print(f"Review: {review} - Prediction: {recommendation}")

